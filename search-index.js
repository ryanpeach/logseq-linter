var searchIndex = new Map(JSON.parse('[\
["logseq_linter",{"doc":"The entry point of the program.","t":"FNNNNNNNNNNNCNHCCONNNNNFFNNNNONNNNNNNNNNONNNNNNNOFNNONNNNNNCCFFNNNNNONNOOONNNNNNNNONNNOOONONNNNNNONNNFFNNNNNNNNNNNNNNNOONNNOOONOONNNNNNON","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","indexer","into","main","meilisearch","parsing","path","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","Indexer","MdWalker","borrow","borrow","borrow_mut","borrow_mut","db","from","from","index_blocks","index_files","into","into","into_iter","new","new","next","pattern","progress_with","try_from","try_from","try_into","try_into","type_id","type_id","walker","Meilisearch","borrow","borrow_mut","client","from","into","new","try_from","try_into","type_id","block","file","Block","BlockBuilder","borrow","borrow","borrow_mut","borrow_mut","build","content","deserialize","eq","file_id","file_id","file_path","fmt","from","from","get_id","get_properties","get_slice","get_tags","get_wikilinks","id","into","into","new","parent_block_id","parent_block_id","properties","serialize","tags","try_from","try_from","try_into","try_into","type_id","type_id","wikilinks","with_file_id","with_file_path","with_parent_block_id","File","FileBuilder","borrow","borrow","borrow_mut","borrow_mut","build","deserialize","eq","fmt","from","from","get_properties","get_tags","get_title","get_top_text","get_wikilinks","id","id","into","into","new","path","path","properties","serialize","tags","title","try_from","try_from","try_into","try_into","type_id","type_id","wikilinks","with_path"],"q":[[0,"logseq_linter"],[23,"logseq_linter::indexer"],[49,"logseq_linter::meilisearch"],[59,"logseq_linter::parsing"],[61,"logseq_linter::parsing::block"],[101,"logseq_linter::parsing::file"],[137,"clap_builder::builder::command"],[138,"core::fmt"],[139,"core::fmt"],[140,"clap_builder"],[141,"core::result"],[142,"clap_builder::util::id"],[143,"core::option"],[144,"core::any"],[145,"markdown::mdast"],[146,"alloc::string"],[147,"std::path"],[148,"indicatif::progress_bar"],[149,"indicatif::iter"],[150,"markdown::mdast"],[151,"serde::de"],[152,"std::collections::hash::map"],[153,"serde::ser"],[154,"std::path"]],"d":["Simple program to greet a person","","","","","","","","Returns the argument unchanged.","","","","Utilities for handling files and directories.","Calls <code>U::from(self)</code>.","","Meilisearch is a powerful, fast, open-source, easy to use …","","Input folder path","","","","","","","Walks a directory tree and yields files matching a glob …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new <code>GlobWalker</code> with a given path and pattern.","","Get the next file matching the pattern. Returns the …","The glob pattern to match.","","","","","","","","The underlying directory walker.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","This is a logseq block, which is a markdown list element","","","","","","","The text content of the block divided into types","","","","The file this block belongs to","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The index of the block in the list","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Parent block id","The block properties","","The block tags","","","","","","","The wikilinks in the block","","","","This is a markdown file in logseq","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","The id of the file","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The path of the file","The page-properties of the file","","page tags","The title of the file","","","","","","","wikilinks in the file",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,0,2,0,0,0,2,2,2,2,2,2,0,0,18,12,18,12,12,18,12,12,12,18,12,18,18,12,18,18,18,18,12,18,12,18,12,18,0,21,21,21,21,21,21,21,21,21,0,0,0,0,22,24,22,24,22,24,24,24,22,24,22,24,22,24,22,22,22,22,22,24,22,24,22,22,24,24,24,24,22,24,22,24,22,24,24,22,22,22,0,0,29,30,29,30,29,30,30,30,29,30,29,29,29,29,29,29,30,29,30,29,29,30,30,30,30,30,29,30,29,30,29,30,30,29],"f":"`{bb}0{ce{}{}}0{{}b}0{{df}h}{cc{}}{j{{n{dl}}}}0{{}{{Ab{A`}}}}`5{{}Ad}```{c{{n{e}}}{}{}}0{cAf{}}{{dj}{{n{Adl}}}}0``9999`66{{AhAjAlAnB`}{{n{AdAn}}}}{{AhAlBb}{{n{AdAn}}}};;;{AlBd}{{}Ah}{Bd{{Ab{c}}}{}}`{{cBf}{{Bh{e}}}{}{}}888877``??`<?{{}Bj}998````{ce{}{}}000{{BlAlBn}{{n{{Cb{C`}}An}}}}`{c{{n{C`}}}Cd}{{C`C`}Bb}```{{C`f}h}{cc{}}0{AlAn}{Al{{Cf{AnAn}}}}{{BlAlBn}{{n{AnAn}}}}{Al{{Cb{An}}}}0`99{{}Bl}```{{C`c}nCh}`{c{{n{e}}}{}{}}000{cAf{}}0`{{BlAn}Bl}{{BlB`}Bl}1``????{{CjAlAj}{{n{ClAn}}}}{c{{n{Cl}}}Cd}{{ClCl}Bb}{{Clf}h}>><{{AlAl}{{Cb{An}}}}{CnAn}{AjAn}=``{ce{}{}}0{{}Cj}```{{Clc}nCh}``====<<`{{CjB`}Cj}","c":[],"p":[[5,"Command",137],[5,"Args",0],[5,"Formatter",138],[8,"Result",138],[5,"ArgMatches",139],[8,"Error",140],[6,"Result",141],[5,"Id",142],[6,"Option",143],[1,"unit"],[5,"TypeId",144],[5,"Indexer",23],[6,"Node",145],[1,"str"],[5,"String",146],[5,"PathBuf",147],[1,"bool"],[5,"MdWalker",23],[5,"ProgressBar",148],[5,"ProgressBarIter",149],[5,"Meilisearch",49],[5,"BlockBuilder",61],[5,"ListItem",145],[5,"Block",61],[5,"Vec",150],[10,"Deserializer",151],[5,"HashMap",152],[10,"Serializer",153],[5,"FileBuilder",101],[5,"File",101],[5,"Path",147]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
